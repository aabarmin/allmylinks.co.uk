name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    permissions:
      contents: read

    services:
      database:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgresql
          POSTGRES_USER: postgresql
          POSTGRES_DB: aml
        ports:
          - 15432:5432
      mail:
        image: rnwood/smtp4dev
        ports:
          - 5000:80
          - 2525:25

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x :aml-e2e:test
        env:
          BACKOFFICE_BOT_TOKEN: ${{ secrets.BACKOFFICE_BOT_TOKEN }}
          BACKOFFICE_ADMIN_CHAT_ID: ${{ secrets.BACKOFFICE_ADMIN_CHAT_ID }}

      - name: "Store test results - aml-app"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "Test Reports"
          path: aml-app/build/reports
          retention-days: 7

      - name: Rename the artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          rm -rf aml-backend/build/libs/*-plain.jar
          mv aml-app/build/libs/*.jar aml-app/build/libs/app.jar

      - name: Upload Artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: ./aml-app/build/libs/app.jar

  get-version:
    name: "Get version"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
      - name: Get the current version
        id: get_version
        run: |
          version=$(grep -E '^version=' gradle.properties | cut -d'=' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT

  check-version-exists:
    name: "Check if version exists"
    runs-on: ubuntu-latest
    needs: [get-version]
    environment: Production

    steps:
      - name: Check if the version already exists
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            if [ -d "/home/${{ secrets.SERVER_USERNAME }}/app/${{ needs.get-version.outputs.version }}" ]; then exit 1; fi

  deploy:
    name: "Deploy the artifact"
    runs-on: ubuntu-latest
    needs: [build, get-version, check-version-exists]
    environment: Production
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: .

      - name: Upload to the server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: "./app.jar"
          target: /home/${{ secrets.SERVER_USERNAME }}/app/${{ needs.get-version.outputs.version }}

      - name: Stop the existing app
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            APP_PID=$(jps | grep app.jar | grep -Eo '[0-9]+')
            if [ -n "$APP_PID" ]; then kill -9 $APP_PID; fi

      - name: Run the new version
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /home/${{ secrets.SERVER_USERNAME }}/app/
            rm app.jar
            ln -fs /home/${{ secrets.SERVER_USERNAME }}/app/${{ needs.get-version.outputs.version }}/app.jar app.jar
            nohup ./run.sh

  dependency-submission:

    name: "Generate and submit dependency graph"
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
