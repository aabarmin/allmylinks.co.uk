plugins {
	id 'java'
    id 'idea'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'dev.abarmin'
version = getProjectVersion()

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation "org.webjars.npm:jquery:3.7.1"
	implementation "org.webjars.npm:bootstrap:5.3.3"
	implementation 'org.webjars.npm:bootstrap-icons:1.11.3'
	implementation 'org.webjars.npm:htmx.org:2.0.3'

	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.postgresql:postgresql'

    implementation 'com.google.guava:guava:33.3.1-jre'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'net.coobird:thumbnailator:0.4.20'
    implementation 'commons-io:commons-io:2.18.0'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	'org.projectlombok:lombok'.with {
		compileOnly it
		testCompileOnly it
		annotationProcessor it
		testAnnotationProcessor it
	}

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.awaitility:awaitility:4.3.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

def getCurrentGitBranch() {
    def gitBranch = "Unknown branch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
    }
    return gitBranch
}

def getProjectVersion() {
    return getCurrentGitBranch() == 'main' ?
            project.version :
            project.version + '-SNAPSHOT';
}

tasks.register('addProjectVersion'){
    doLast {
        new File(projectDir, 'src/main/resources/version.properties').withWriter { writer ->
            writer.write("version=${project.version}")
        }
    }
}

tasks.named('processResources') {
    dependsOn 'addProjectVersion'
}
